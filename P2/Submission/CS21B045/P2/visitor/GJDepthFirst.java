//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.lang.reflect.Method;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
@SuppressWarnings("unchecked")
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   ClassInfo hoistData;
   Vector<String> tempargtypes;

   //Constructor
   public GJDepthFirst(ClassInfo hoistData) 
   {
      this.hoistData = hoistData;

      //Typecheck HoistData
      TypeCheckHoist();
      
      
   }

   public void TypeCheckHoist()
   {
      // Check for cycles
      Iscycle(hoistData.parentMap);

      //Check for undefined parent classes
      for (String key : hoistData.parentMap.keySet())
      {
         String parent = hoistData.parentMap.get(key);
         if(parent != null && !hoistData.exists(parent))
         {
            System.out.println(parent);
            error();
         }
      }

      //Check for undefined class fields in each class
      for (Map<String,String> fieldMap : hoistData.fieldList)
      {
         for (String key : fieldMap.keySet())
         {
            String type = fieldMap.get(key);
            if(Nonprimitive(type) && !hoistData.exists(type)) error();
         }
      }

      //Check for undefined method return types, parameters and method var decls in each class
      for(Map<String,MethodData> methodMap : hoistData.methodList)
      {
         for (String key : methodMap.keySet())
         {
            MethodData methodData = methodMap.get(key);
            String returntype = methodData.returntype;
            if(Nonprimitive(returntype) && !hoistData.exists(returntype)) error();
            for (String argtype : methodData.argtypes)
            {
               if(Nonprimitive(argtype) && !hoistData.exists(argtype)) error();
            }
            for (String var : methodData.methodDecls.keySet())
            {
               String type = methodData.methodDecls.get(var);
               if(Nonprimitive(type) && !hoistData.exists(type)) error();
            }
         }
      }

      //Check for method overloading in class heirarchy
      for(int i=0; i< hoistData.classOrder.size(); i++)
      {
         String parent = hoistData.parentMap.get(hoistData.classOrder.get(i));
         if(parent == null) continue;
         for(Map<String,MethodData> allMethods : hoistData.methodList)
         {
            for(String method : allMethods.keySet())
            {
               String ancestor = parent;
               while(ancestor != null)
               {
                  int indx = hoistData.classOrder.indexOf(ancestor);
                  Map<String,MethodData> ancesmethods = hoistData.methodList.get(indx);
                  // Check if not an Override
                  if(ancesmethods.containsKey(method) && 
                     !( SignatureMatch(allMethods.get(method), ancesmethods.get(method)) 
                        && Subtype(allMethods.get(method).returntype, ancesmethods.get(method).returntype))) 
                  error();
               
                  ancestor = hoistData.parentMap.get(ancestor);
               }
            }
         }
      }
   }

   //Util Functions

   public String getmethodtype(String classname, String methodname, Vector<String> argtypes)
   {
      int indx = hoistData.classOrder.indexOf(classname);
      Map<String,MethodData> methodMap = hoistData.methodList.get(indx);
      if(methodMap.containsKey(methodname))
      {
         MethodData methodData = methodMap.get(methodname);
         if(methodData.argtypes.size() != argtypes.size()) return null;
         for(int i=0; i<argtypes.size(); i++)
         {
            if(!Subtype(argtypes.get(i), methodData.argtypes.get(i))) return null;
         }
         return methodData.returntype;
      }
      String ancestor = hoistData.parentMap.get(classname);
      while(ancestor!=null)
      {
         indx = hoistData.classOrder.indexOf(ancestor);
         methodMap = hoistData.methodList.get(indx);
         if(methodMap.containsKey(methodname))
         {
            MethodData methodData = methodMap.get(methodname);
            if(methodData.argtypes.size() != argtypes.size()) return null;
            for(int i=0; i<argtypes.size(); i++)
            {
               if(!Subtype(argtypes.get(i), methodData.argtypes.get(i))) return null;
            }
            return methodData.returntype;
         }
         ancestor = hoistData.parentMap.get(ancestor);
      }
      return null;
   }

   public String getfieldtype(String classname, String fieldname)
   {
      int indx = hoistData.classOrder.indexOf(classname);
      Map<String,String> fieldMap = hoistData.fieldList.get(indx);
      if(fieldMap.containsKey(fieldname)) return fieldMap.get(fieldname);
      String ancestor = hoistData.parentMap.get(classname);
      while(ancestor!=null)
      {
         indx = hoistData.classOrder.indexOf(ancestor);
         fieldMap = hoistData.fieldList.get(indx);
         if(fieldMap.containsKey(fieldname)) return fieldMap.get(fieldname);
         ancestor = hoistData.parentMap.get(ancestor);
      }
      return null;
   }

   public boolean typematch(String t1, String t2)
   {
      if(t1==t2) return true;
      if(t1==null || t2==null) return false;
      if(Nonprimitive(t1) && Nonprimitive(t2))
      {
         return Subtype(t1, t2) || Subtype(t2, t1);
      }
      return false;
   }

   public String getdomaintype(String var)
   {
      int indx = hoistData.classOrder.indexOf(hoistData.domainclass);
      Map<String,String> fieldMap = hoistData.fieldList.get(indx);
      MethodData methodData = hoistData.methodList.get(indx).get(hoistData.domainmethod);
      if(methodData.methodDecls.containsKey(var)) return methodData.methodDecls.get(var);
      if(methodData.argnames.contains(var)) return methodData.argtypes.get(methodData.argnames.indexOf(var));
      if(fieldMap.containsKey(var)) return fieldMap.get(var);
      String ancestor = hoistData.parentMap.get(hoistData.domainclass);
      while(ancestor!=null)
      {
         indx = hoistData.classOrder.indexOf(ancestor);
         fieldMap = hoistData.fieldList.get(indx);
         if(fieldMap.containsKey(var)) return fieldMap.get(var);
         ancestor = hoistData.parentMap.get(ancestor);
      }
      System.out.println("Error: Variable "+var+" not declared");
      error();
      return null;
   }

   public boolean Subtype(String t1, String t2)
   {
      if(t1==t2) return true;
      if(!(Nonprimitive(t1) && Nonprimitive(t2))) return false;
      String ances = t1;
      while(ances!=null)
      {
         if(ances==t2) return true;
         ances = this.hoistData.parentMap.get(ances);
      }
      return false;
   }

   public boolean SignatureMatch(MethodData m1, MethodData m2)
   {
      if(m1.argtypes.size() != m2.argtypes.size()) return false;
      for(int i=0; i< m1.argtypes.size(); i++) if(m1.argtypes.get(i) != m2.argtypes.get(i)) return false;
      return true;
   }

   public boolean Nonprimitive(String type)
   {
      if(type.equals("int") || type.equals("int[]") || type.equals("boolean"))
         return false;
      return true;
   }

   public void Iscycle(Map<String,String> parentMap)
   {
      Map<String,Integer> visited = new HashMap<String,Integer>();
      for (String key : parentMap.keySet())
      {
         visited.put(key,0);
         String parent = parentMap.get(key);
         if(parent != null) visited.put(parent,0);
      }
      for (String key : parentMap.keySet())
      {
         boolean res = dfs(key,visited,parentMap);
         if(res) error();
      }
   }

   public boolean dfs(String key, Map<String,Integer> visited, Map<String,String> parentMap)
   {
      if(visited.get(key) == 2) return false;
      visited.put(key,1);
      String parent = parentMap.get(key);
      if(parent == null) return false;
      if(visited.get(parent) == 1) return true;
      boolean res = false;
      if(visited.get(parent)==0) res = dfs(parent,visited,parentMap);
      visited.put(key,2);
      return res;     
   }

   public void error()
   {
      System.out.println("Type error");
      System.exit(0);
   }

   //Visit Functions
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      hoistData.domainclass = n.f1.f0.tokenImage;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      hoistData.domainclass = n.f1.f0.tokenImage;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      hoistData.domainmethod = n.f2.f0.tokenImage;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String id = n.f0.f0.tokenImage;
      R idtype = (R) getdomaintype(id);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R exprtype = n.f2.accept(this, argu);
      if(!typematch((String)idtype, (String)exprtype)) error();
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String idtype = getdomaintype(n.f0.f0.tokenImage);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R etyp1 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      R etyp2 = n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(idtype!="int[]" || etyp1!=(R)"int" || etyp2!=(R)"int") error();
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R etyp = n.f2.accept(this, argu);
      if(etyp!=(R)"boolean") error();
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R etyp = n.f2.accept(this, argu);
      if(etyp!=(R)"boolean") error();
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R etyp = n.f2.accept(this, argu);
      if(etyp!=(R)"boolean") error();
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      R etyp = n.f4.accept(this, argu);
      if(etyp!=(R)"boolean") error();
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R etyp = n.f2.accept(this, argu);
      if(etyp!=(R)"int") error();
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R typ2 = n.f2.accept(this, argu);
      _ret = (R) "boolean";
      if(typ1!=_ret || typ2!=_ret) error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R typ2 = n.f2.accept(this, argu);
      _ret = (R) "boolean";
      if(typ1!=_ret || typ2!=_ret) error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R typ2 = n.f2.accept(this, argu);
      _ret = (R) "boolean";
      R intType = (R) "int";
      if(typ1!=intType || typ2!=intType) error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R typ2 = n.f2.accept(this, argu);
      _ret = (R) "boolean";
      if(!typematch((String)typ1,(String)typ2)) error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R typ2 = n.f2.accept(this, argu);
      _ret = (R) "int";
      if(typ1!=_ret || typ2!=_ret) error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R typ2 = n.f2.accept(this, argu);
      _ret = (R) "int";
      if(typ1!=_ret || typ2!=_ret) error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R typ2 = n.f2.accept(this, argu);
      _ret = (R) "int";
      if(typ1!=_ret || typ2!=_ret) error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R typ2 = n.f2.accept(this, argu);
      _ret = (R) "int";
      if(typ1!=_ret || typ2!=_ret) error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R typ2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      _ret = (R) "int";
      if(typ1!=(R)"int[]" || typ2!=_ret) error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(typ1 == (R)"int[]") _ret = (R)"int";
      else if(Nonprimitive((String)typ1))
      {
         String typ = getfieldtype((String)typ1,"length");
         if(typ==null) error();
         else _ret = (R)typ;
      }
      else error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      if(!Nonprimitive((String)typ1)) error();
      this.tempargtypes = new Vector<String>();
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      String methodname = n.f2.f0.tokenImage;
      String ret_type = getmethodtype((String)typ1,methodname,this.tempargtypes);
      if(ret_type==null) error();
      else _ret = (R)ret_type;
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      R typ1 = n.f0.accept(this, argu);
      this.tempargtypes.add((String)typ1);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R typ = n.f1.accept(this, argu);
      this.tempargtypes.add((String)typ);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(_ret == null)
      {
         int whichchoice = n.f0.which;
         if(whichchoice==3)
         {
            Identifier id = (Identifier) n.f0.choice;
            String typ = getdomaintype(id.f0.tokenImage);
            _ret = (R) typ;
         }
         else if(whichchoice==4)
         {
            _ret = (R) hoistData.domainclass;
         }
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "int";
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //Ask the parent because can't decipher scope
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //Ask the parent because can't decipher scope
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R typ_expr = n.f3.accept(this, argu);
      if(typ_expr!="int")error();
      _ret = (R) "int[]";
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {

      String clsname = n.f1.f0.tokenImage;
      if(!hoistData.exists(clsname)) error();

      R _ret=null;
      _ret = (R) clsname;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R typ_expr = n.f1.accept(this, argu);
      if(typ_expr!="boolean") error();
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu); //Same type as expr
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
