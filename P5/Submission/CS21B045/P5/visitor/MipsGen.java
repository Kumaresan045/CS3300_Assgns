//
// Generated by Kums
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

@SuppressWarnings("unchecked")
public class MipsGen<R,A> implements GJVisitor<R,A> {
   //============= Data Structures for storing the information ============//

   String finalCode;
   int childOffset;
   int ownOffset;

   public MipsGen()
   {
      this.finalCode = "";
      this.childOffset = 0;
      this.ownOffset = 0;
   }

   //===================== Auxillary Helper Functions =====================//

   OffsetAdjustRetValue translate(int location)
   {
      OffsetAdjustRetValue ret = new OffsetAdjustRetValue(location, "$fp");
      if(location < ownOffset) return ret;
      else
      {
         ret.offset = location + childOffset - ownOffset;
         ret.reg = "$sp";
         return ret;
      }
   }

   String procedureHeading(String procedureName)
   {
      String code = 
      "	.text\n" +
      "	.globl  " + procedureName + "\n" +
      procedureName + ":\n";
  
      return code;
   }

   String mainPrologue(int stackSpace)
   {
      stackSpace++;
      stackSpace*=4;
      String code = "	move $fp, $sp\n";
      code += "	sw $ra, -4($fp)\n";
      code += "	subu $sp, $sp, " + stackSpace + "\n";
      return code;
   }

   String mainEpilogue(int stackSpace)
   {
      stackSpace++;
      stackSpace*=4;
      String code = "	addu $sp, $sp, " + stackSpace + "\n";
      code += "	lw $ra, -4($fp)\n";
      code += "	j $ra\n\n";
      return code;
   }

   String procedurePrologue(int stackSpace)
   {
      stackSpace+=2;
      stackSpace*=4;
      String code = "	sw $fp, -8($sp)\n";
      code += "	move $fp, $sp\n";
      code += "	sw $ra, -4($fp)\n";
      code += "	subu $sp, $sp, " + stackSpace + "\n";
      return code;
   }

   String procedureEpilogue(int stackSpace)
   {
      stackSpace+=2;
      stackSpace*=4;
      String code = "	addu $sp, $sp, " + stackSpace + "\n";
      code += "	lw $ra, -4($fp)\n";
      code += "	lw $fp, -8($sp)\n";
      code += "	j $ra\n\n";
      return code;
   }

   String codeEpilogue()
   {
      String code = 
      "	.text\n" +
      "	.globl _halloc\n" +
      "_halloc:\n" +
      "	li $v0, 9\n" +
      "	syscall\n" +
      "	j $ra\n" +
      "\n" +
      "	.text\n" +
      "	.globl _print\n" +
      "_print:\n" +
      "	li $v0, 1\n" +
      "	syscall\n" +
      "	la $a0, newl\n" +
      "	li $v0, 4\n" +
      "	syscall\n" +
      "	j $ra\n" +
      "\n" +
      "	.data\n" +
      "	.align 0\n" +
      "newl:	.asciiz \"\\n\"\n" +
      "	.data\n" +
      "	.align 0\n" +
      "str_er:	.asciiz \"ERROR: abnormal termination\\n\"" ;

      return code;
   }

   public String displayFinalCode()
   {
      return finalCode;
   }


   //======================================================================// 
   //============== Visitor methods for the syntax tree nodes =============//
   //======================================================================// 


   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) 
   {
      R _ret=null;
      String code = "";
      int numArgs = Integer.parseInt(n.f2.f0.tokenImage);
      int stackSpace = Integer.parseInt(n.f5.f0.tokenImage);
      int maxChildArgs = Integer.parseInt(n.f8.f0.tokenImage);
      childOffset = Math.max(maxChildArgs-4,0);
      ownOffset = Math.max(numArgs-4,0);
      stackSpace += childOffset - ownOffset;
     

      code += procedureHeading("main");
      code += mainPrologue(stackSpace);
      code += n.f10.accept(this, argu); 
      code += mainEpilogue(stackSpace);
     
      //Adding the code for the procedures
      code += n.f13.accept(this, argu);

      //Final Epilogue Addition
      code += codeEpilogue();
      
      n.f14.accept(this, argu);
      finalCode = code;
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) 
   {
      R _ret=null;
      String code = "";

      if(n.f0.present())
      {
         for(Node node : n.f0.nodes)
         {
            NodeSequence seq = (NodeSequence)node;
            NodeOptional label = (NodeOptional) seq.elementAt(0);
            if(label.present())
            {
               String labelName = ((Label)label.node).f0.tokenImage;
               code += labelName + ":	";
            }
            Stmt stmt = (Stmt) seq.elementAt(1);
            code += stmt.accept(this,argu);
         }
      }

      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) 
   {
      R _ret=null;
      String code = "";
      String procName = n.f0.f0.tokenImage;
      int numArgs = Integer.parseInt(n.f2.f0.tokenImage);
      int stackSpace = Integer.parseInt(n.f5.f0.tokenImage);
      int maxChildArgs = Integer.parseInt(n.f8.f0.tokenImage);
      childOffset = Math.max(maxChildArgs-4,0);
      ownOffset = Math.max(numArgs-4,0);
      stackSpace += childOffset - ownOffset;
      
      code += procedureHeading(procName);
      code += procedurePrologue(stackSpace);
      code += n.f10.accept(this, argu);
      code += procedureEpilogue(stackSpace);

      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) 
   {
      R _ret=null;
      String code = "";
      code += n.f0.accept(this, argu);
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      _ret = (R)"nop\n";
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      String code = "la $a0, str_er\n" +
             "	li $v0, 4\n" +
             "	syscall\n" +
             "	li $v0, 10\n" +
             "	syscall\n";
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      String code = "";
      String reg = (String) n.f1.accept(this, argu);
      String label = (String) n.f2.accept(this, argu);
      code += "	beqz " + reg + " " + label + "\n";
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      String code = "";
      String label = (String) n.f1.accept(this, argu);
      code += "	b " + label + "\n";
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      String code = "";
      String reg1 = (String) n.f1.accept(this, argu);
      String offset = n.f2.f0.tokenImage;
      String reg2 = (String) n.f3.accept(this, argu);
      code += "	sw " + reg2 + ", " + offset + "(" + reg1 + ")\n";
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) 
   {
      R _ret=null;
      String code = "";
      String reg1 = (String) n.f1.accept(this, argu);
      String reg2 = (String) n.f2.accept(this, argu);
      String offset = n.f3.f0.tokenImage;
      code += "	lw " + reg1 + ", " + offset + "(" + reg2 + ")\n";
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      String code = "";
      String destReg = (String) n.f1.accept(this, argu);
      
      int choice = n.f2.f0.which;
      if(choice == 0) //Hallocate
      {
         HAllocate halloc = (HAllocate) n.f2.f0.choice;
         SimpleExpReg simpleExpReg = new SimpleExpReg("a0");
         code += (String) halloc.f1.accept(this, (A)simpleExpReg);
         code += "   	jal _halloc\n";
         code += "   	move " + destReg + " $v0\n";
      }
      else if(choice == 1) //Bin Op
      {
         BinOpDestReg binOpDestReg = new BinOpDestReg(destReg);
         code += (String) n.f2.accept(this, (A)binOpDestReg);
      }
      else if(choice == 2) //Simple Exp
      {
         SimpleExp simpleExp = (SimpleExp) n.f2.f0.choice;
         int choice2 = simpleExp.f0.which;
         if(choice2==0)
         {
            String srcReg = (String) simpleExp.accept(this, argu);
            code += "   	move " + destReg + " " + srcReg + "\n";
         }
         else if(choice2 == 1)
         {
            String intLit = (String) simpleExp.accept(this, argu);
            code += "   	li " + destReg + " " + intLit + "\n";
         }
         else if(choice2 == 2)
         {
            String label = (String) simpleExp.accept(this, argu);
            code += "   	la " + destReg + " " + label + "\n";
         }
      }
      _ret = (R)code;		   
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      String code = "";
      SimpleExpReg simpleExpReg = new SimpleExpReg("a0");
      code += (String) n.f1.accept(this, (A)simpleExpReg);
      code += "   	jal _print\n";
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      String code = "";
      String reg = (String) n.f1.accept(this, argu);
      int offset = Integer.parseInt((String) n.f2.accept(this, argu));
      OffsetAdjustRetValue ret = translate(offset);
      offset = ret.offset;
      String reg2 = ret.reg;
      offset*=4;
      code += "	lw " + reg + ", " + offset + "("+ reg2 +")\n";
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      String code = "";
      String reg = (String) n.f2.accept(this, argu);
      int offset = Integer.parseInt((String) n.f1.accept(this, argu));
      OffsetAdjustRetValue ret = translate(offset);
      offset = ret.offset;
      String reg2 = ret.reg;
      offset*=4;
      code += "	sw " + reg + ", " + offset + "("+ reg2 +")\n";
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      String code = "";
      int offset = Integer.parseInt(n.f1.f0.tokenImage);
      offset--;
      offset*=4;
      String reg = (String) n.f2.accept(this, argu);
      code += "	sw " + reg + ", " + offset + "($sp)\n";
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) 
   {
      R _ret=null;
      String code = "";
      String simpleExp = (String) n.f1.accept(this, argu);
      code += "	jalr " + simpleExp + "\n";
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) 
   {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      return (R)"";
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) 
   {
      R _ret=null;
      String code = "";
      if(argu instanceof BinOpDestReg)
      {
         String destReg = ((BinOpDestReg)argu).destReg;
         String op = (String) n.f0.accept(this,argu);
         String reg1 = (String) n.f1.accept(this, argu);
         String reg2 = "";
         int choice2 = n.f2.f0.which;
         if(choice2==0)
         {
            reg2 = (String) n.f2.accept(this, argu);
         }
         else
         {
            SimpleExpReg simpleExpReg = new SimpleExpReg("v1");
            code += (String) n.f2.accept(this, (A)simpleExpReg);
            reg2 = "$v1";
         }
         if(op.equals("LE")) op = "sle ";
         else if(op.equals("NE")) op = "sne ";
         else if(op.equals("PLUS")) op = "addu ";
         else if(op.equals("MINUS")) op = "subu ";
         else if(op.equals("TIMES")) op = "mul ";
         else if(op.equals("DIV")) op = "div ";
         
         code += "	"+ op + destReg + ", " + reg1 + ", " + reg2 + "\n";
         _ret = (R)code;
         return _ret;
      }
      
      code += n.f2.accept(this, argu);
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) 
   {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) 
   {
      R _ret=null;
      String code = "";
      code += n.f1.accept(this, argu);
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) 
   {
      R _ret=null;
      String code = "";

      if(argu instanceof SimpleExpReg)
      {
         int simpleExprChoice = n.f0.which;
         if(simpleExprChoice == 0)
         {
            String reg = (String)(n.f0.accept(this, argu));
            code += "	move $" + ((SimpleExpReg)argu).reg + " " + reg + "\n";
         }
         else if(simpleExprChoice == 1)
         {
            String intLit = (String) n.f0.accept(this, argu);
            code += "	li $" + ((SimpleExpReg)argu).reg + " " + intLit + "\n";
         }
         else
         {
            String label = (String) n.f0.accept(this, argu);
            code += "	la $" + ((SimpleExpReg)argu).reg + " " + label + "\n";
         }
         _ret = (R)code;
         return _ret;
      }

      code += n.f0.accept(this, argu);
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      String code = "";
      code += '$';
      code += n.f0.accept(this, argu);
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String code = "";
      code += n.f0.tokenImage;
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      String code = "";
      code += n.f0.tokenImage;
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      return (R)"";
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      return (R)"";
   }

//==========================================================================================================//

   public R visit(NodeList n, A argu) {
    R _ret=null;
    String code = "";
    int _count=0;
    for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
       code += e.nextElement().accept(this,argu);
       _count++;
    }
      _ret = (R)code;
    return _ret;
 }

 public R visit(NodeListOptional n, A argu) {
    if ( n.present() ) {
       R _ret=null;
      String code = "";
       int _count=0;
       for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
          code += e.nextElement().accept(this,argu);
          _count++;
       }
      _ret = (R)code;
       return _ret;
    }
    else
       return (R)("");
 }

 public R visit(NodeOptional n, A argu) {
    if ( n.present() )
       return n.node.accept(this,argu);
    else
       return (R)("");
 }

 public R visit(NodeSequence n, A argu) {
    R _ret=null;
    String code = "";
    int _count=0;
    for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
      code += e.nextElement().accept(this,argu);
       _count++;
    }
      _ret = (R)code;
    return _ret;
 }

 public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

}//===============CUSTOM CLASSES===================//

class SimpleExpReg
{
   public String reg;
   public SimpleExpReg(String reg)
   {
      this.reg = reg;
   }
}

class BinOpDestReg
{
   public String destReg;
   public BinOpDestReg(String destReg)
   {
      this.destReg = destReg;
   }
}

class OffsetAdjustRetValue
{
   public int offset;
   public String reg;
   public OffsetAdjustRetValue(int offset, String reg)
   {
      this.offset = offset;
      this.reg = reg;
   }
}
